{% extends 'base.html.twig' %}

{% block content %}
    <div class="container">
        <h2>Meritocrate</h2>
        <div class="row">
            <div class="col s12">
                <h4>{{ group.name }} Group </h4>
                <p id="group-date-creation"> Created on {{ group.datecreation|date('m/d/Y') }} at {{ group.datecreation|date('h:i:s a') }} </p>
            </div>
            <table class="highlight centered">
                <thead>
                    <tr>
                        <td><i class="material-icons">schedule</i>Timestamp</td>
                        <td>Display Name</td>
                        <td><i class="material-icons">face</i>Picture</td>
                        <td><i class="material-icons">thumb_up</i>Merit</td>
                    </tr>
                </thead>
                <tbody id="tbody">
                    {% if speeches is not empty %}
                        {% for speech in speeches %}
                            <tr>
                                <td>{{ speech.timestamp|date('h:i:s a') }}</td>
                                <td>{{ speech.user.username }}</td>
                                <td><img src="{{ asset('bundles/meritocrate/images/'~speech.user.picture) }}"/></td>
                                <td>
                                    <button class="merits">
                                        <input type="hidden" class="idSpeech" value="{{ speech.id }}"/>
                                        <input type="hidden" class="idSpeaker" value="{{ speech.user.id }}"/>
                                        <i class="material-icons">stars</i>
                                    </button>
                                </td>
                            </tr>
                        {% endfor %}
                    {% endif %}
                </tbody>
            </table>
        </div>
        <div class="row">
            <button class="btn waves-effet waves-light" id="speak">
                Press to speak
                <i class="material-icons left">mic</i>
            </button>
            <button class="btn waves-effet waves-light" id="refresh">
                Refresh
            </button>
        </div>
        <div class="row">
            <a href="{{ path('meritocrate_join_discussion') }}"><button class="btn waves-effet waves-light right green">
                Exit Group
                <i class="material-icons left">exit_to_app</i>
            </button></a>
        </div>
    </div>
{% endblock %}
{% block javascripts %}
<script type="text/javascript">
        var idGroup = {{ group.id }};

        var buttonSpeakElt = document.getElementById('speak');
        var buttonRefreshElt = document.getElementById('refresh');
        var tBodyElt = document.getElementById('tbody');

        /***** SENDS A REQUEST WHEN SOMEONE PRESSES TO SPEAK *****/
        function ajaxPost(url, callback, idUser, idGroup){
            var req = new XMLHttpRequest();
            req.open('post', url, true);
            req.addEventListener("load", function(){
                if(req.status >=200 && req.status <400){
                    callback(req.responseText);
                }
            });
            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            req.send("idUser="+idUser+"&idDiscussion="+idGroup+"");
        }

        buttonSpeakElt.addEventListener("click", function(){
            this.disabled = true;
            var idUser = {{ user.id }};

            function show(response){
                alert(response);
                buttonSpeakElt.disabled = false;
            }
            ajaxPost('{{ path('meritocrate_set_speaker') }}', show, idUser, idGroup);
        });

        /***** UPDATES THE SPEAKERS LIST EVERY 7 SECONDS *****/
        function ajaxUpdateUsers(url, callback, idLastSpeech, idGroup){
            var req = new XMLHttpRequest();
            req.open('post', url, true);
            req.addEventListener("load", function(){
                if(req.status >=200 && req.status <400){
                    callback(req.responseText);
                }
            });
            req.addEventListener("error", function(){
                console.log("erreur");
            });
            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            req.send("idLastSpeech="+idLastSpeech+"&idDiscussion="+idGroup+"");
        }

        /* How many rows in the table body ? */
        var idLastSpeech;
        var tBodyTrElts = document.querySelectorAll('#tbody tr');
        var tBodyTrEltsLength = tBodyTrElts.length;
        console.log(tBodyTrEltsLength);

        if(tBodyTrEltsLength == 0){
            idLastSpeech = 0;
        }
        else{
            idLastSpeech = tBodyTrElts[tBodyTrEltsLength-1].childNodes[7].childNodes[1].childNodes[1].getAttribute('value');
        }
        console.log(idLastSpeech);

        buttonRefreshElt.addEventListener("click", addSpeeches);

        function addSpeeches(){
            console.log(idLastSpeech);
            /* Function executed in case of success of the request */
            function show(response){

                var response = JSON.parse(response);
                if(response.length > 0) {
                    idLastSpeech = response[response.length - 1].id;
                    console.log(idLastSpeech);
                    /* Let's loop over the response results */
                    for(i=0; i<response.length; i++) {
                        /* We catch the date & filters it to display the hour only */
                        var date = '' + new Date(response[i].timestamp['timestamp'] * 1000) + '';
                        date = date.substr(16, 8).toString("hh:mm tt");

                        /* Let's create & fill the html elements to put into the table */
                        var trElt = document.createElement('tr');

                        var tdElt1 = document.createElement('td');
                        var tdElt2 = document.createElement('td');
                        var tdElt3 = document.createElement('td');

                        var tdElt4 = document.createElement('td');
                        var buttonTdElt4 = document.createElement('button');
                        buttonTdElt4.setAttribute('class', 'merits');

                        var inputIdSpeechElt = document.createElement('input');
                        inputIdSpeechElt.setAttribute('type', 'hidden');
                        inputIdSpeechElt.setAttribute('class', 'idSpeech');
                        inputIdSpeechElt.setAttribute('value', response[i].id);

                        var inputIdSpeakerElt = document.createElement('input');
                        inputIdSpeakerElt.setAttribute('type', 'hidden');
                        inputIdSpeakerElt.setAttribute('class', 'idSpeaker');
                        inputIdSpeakerElt.setAttribute('value', response[i].user.id);

                        var imgElt = document.createElement('img');
                        imgElt.setAttribute('src', '{{ asset('bundles/meritocrate/images/') }}' + response[i].user.picture + '');

                        var starElt = document.createElement('i');
                        starElt.setAttribute('class', 'material-icons');
                        starElt.textContent = "stars";

                        tdElt1.textContent = date;
                        tdElt2.textContent = response[i].user.username;

                        tdElt3.appendChild(imgElt);
                        buttonTdElt4.appendChild(inputIdSpeechElt);
                        buttonTdElt4.appendChild(inputIdSpeakerElt);
                        buttonTdElt4.appendChild(starElt);
                        tdElt4.appendChild(buttonTdElt4);

                        trElt.appendChild(tdElt1);
                        trElt.appendChild(tdElt2);
                        trElt.appendChild(tdElt3);
                        trElt.appendChild(tdElt4);
                        tBodyElt.appendChild(trElt);
                    }
                    function ajaxAddMerit(url, callback, idGroup, idSpeaker, idSpeech, idRator){
                        var req = new XMLHttpRequest();
                        req.open('post', url, true);
                        req.addEventListener("load", function(){
                            if(req.status >=200 && req.status <400){
                                callback(req.responseText);
                            }
                        });
                        req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                        req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                        req.send("idSpeaker="+idSpeaker+"&idDiscussion="+idGroup+"&idSpeech="+idSpeech+"&idRator="+idRator+"");
                    }

                    var meritElts = document.getElementsByClassName('merits');
                    console.log(meritElts.length);
                    for(i=0; i<meritElts.length; i++){
                        meritElts[i].addEventListener("click", function(){

                            this.lastElementChild.style.color = "gold";
                            var idSpeech = this.childNodes[0].getAttribute('value');
                            var idSpeaker = this.childNodes[1].getAttribute('value');
                            this.disabled = true;
                            var idRator = {{ user.id }};
                            console.log(idSpeech);
                            console.log(idSpeaker);

                            function show(response){
                                console.log(response);
                            }

                            ajaxAddMerit("{{ path('meritocrate_add_merit') }}", show, idGroup, idSpeaker, idSpeech, idRator);
                        });
                    }
                }
            }
            ajaxUpdateUsers('{{ path('meritocrate_get_speakers') }}', show, idLastSpeech, idGroup);
        }

        function ajaxAddMerit(url, callback, idGroup, idSpeaker, idSpeech, idRator){
            var req = new XMLHttpRequest();
            req.open('post', url, true);
            req.addEventListener("load", function(){
                if(req.status >=200 && req.status <400){
                    callback(req.responseText);
                }
            });
            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            req.send("idSpeaker="+idSpeaker+"&idDiscussion="+idGroup+"&idSpeech="+idSpeech+"&idRator="+idRator+"");
        }

        var meritElts = document.getElementsByClassName('merits');
        console.log(meritElts.length);
        for(i=0; i<meritElts.length; i++){
            meritElts[i].addEventListener("click", function(){
                this.disabled = true;
                this.lastElementChild.style.color = "gold";
                var idSpeech = this.childNodes[1].getAttribute('value');
                var idSpeaker = this.childNodes[3].getAttribute('value');
                var idRator = {{ user.id }};

                function show(response){
                    console.log(response);
                }

                ajaxAddMerit("{{ path('meritocrate_add_merit') }}", show, idGroup, idSpeaker, idSpeech, idRator);
            });
        }
</script>
{% endblock %}