{% extends 'base.html.twig' %}

{% block content %}
    <div class="container">
        <h2>Meritocrate</h2>
        <div class="row">
            <div class="col s12">
                <h4>{{ group.name }} Group </h4>
                <p id="group-date-creation"> Created on {{ group.datecreation|date('m/d/Y') }} at {{ group.datecreation|date('h:i:s a') }} </p>
            </div>
        </div>
        <ul>
        <li id="speak"><a class="btn-floating btn waves-effect waves-light pulse"><i class="material-icons left">mic</i></a></li>
        <li id="processing"><a class="waves-effect waves-light btn red darken-1">Processing <i class="material-icons left">query_builder</i></a></li>
        </ul>
        {% if group.ongoing == "true" %}
            <div class="row">
                <a href="{{ path('meritocrate_join_discussion') }}">
                    <button class="btn waves-effet waves-light right green">
                        Exit Group
                        <i class="material-icons left">exit_to_app</i>
                    </button>
                </a>
            </div>
            <div class="row">
                <table class="highlight centered">
                    <thead>
                        <tr>
                            <td>Timestamp</td>
                            <td>Display Name</td>
                            <td>Picture</td>
                            <td>Merit</td>
                        </tr>
                    </thead>
                    <tbody id="tbody">
                        {% if speeches is not empty %}
                            {% for speech in speeches %}
                                <tr>
                                    <td>{{ speech.timestamp|date('h:i:s a') }}</td>
                                    <td>{{ speech.user.username }}</td>
                                    <td><img src="{{ asset('bundles/meritocrate/images/'~speech.user.picture) }}"/></td>
                                    <td>
                                        {% if app.user.id != speech.user.id %}
                                            {# Let's define an empty variable #}
                                            {% set rating = "" %}

                                            {# Let's check if the user
                                               has already marked the speech
                                             #}

                                            {% for merit in speech.merits %}
                                                {% if merit.rator.id == app.user.id %}
                                                    {% set rating = 'true' %}
                                                {% endif %}
                                            {% endfor %}

                                            {% if rating != true %}
                                                <button class="merits">
                                                    <i class="material-icons">stars</i>
                                                </button>
                                            {% else %}
                                                <button class="merits" style="color: gold;" disabled>
                                                    <i class="material-icons">stars</i>
                                                </button>
                                            {% endif %}
                                        {% endif %}
                                        <input type="hidden" class="idSpeech" value="{{ speech.id }}"/>
                                    </td>
                                </tr>
                            {% endfor %}
                        {% endif %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <p>
                This group has been closed by the owner.
                Get back to home :
            </p>
            <a href="{{ path('meritocrate_admin') }}"><button class="btn btn-large waves-effect waves-light left black">
                    Back to Home
                    <i class="material-icons left">replay</i>
                </button>
            </a>
        {% endif %}

    </div>
{% endblock %}
{% block javascripts %}
<script type="text/javascript">

        /* Which discussion group are we in ? */
        var idGroup = {{ group.id }};

        /* Button "Press to speak" */
        var buttonSpeakElt = document.getElementById('speak');
        var buttonProcessElt = document.getElementById('processing');

        /* tBody */
        var tBodyElt = document.getElementById('tbody');

        /***** SENDS A REQUEST WHEN SOMEONE PRESSES TO SPEAK *****/
        function ajaxPost(url, callback, idUser, idGroup){
            var req = new XMLHttpRequest();
            req.open('post', url, true);
            req.addEventListener("load", function(){
                if(req.status >=200 && req.status <400){
                    callback(req.responseText);
                }
            });
            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            req.send("idUser="+idUser+"&idDiscussion="+idGroup+"");
        }

        buttonSpeakElt.addEventListener("click", function(){

            buttonProcessElt.style.display = "block";

            var idUser = {{ user.id }};

            function show(response){
                setTimeout(function(){
                    buttonSpeakElt.disabled = false;
                }, 3000);
            }
            ajaxPost('{{ path('meritocrate_set_speaker') }}', show, idUser, idGroup);
        });

        /***** UPDATES THE SPEAKERS LIST EVERY 5 SECONDS *****/
        function ajaxUpdateUsers(url, callback, idLastSpeech, idGroup){
            var req = new XMLHttpRequest();
            req.open('post', url, true);
            req.addEventListener("load", function(){
                if(req.status >=200 && req.status <400){
                    callback(req.responseText);
                }
            });
            req.addEventListener("error", function(){
                console.log("erreur");
            });
            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            req.send("idLastSpeech="+idLastSpeech+"&idDiscussion="+idGroup+"");
        }

        /* How many rows in the table body ? */
        var idLastSpeech;
        var tBodyTrElts = document.querySelectorAll('#tbody tr');
        var tBodyTrEltsLength = tBodyTrElts.length;

        if(tBodyTrEltsLength == 0){
            idLastSpeech = 0;
        }
        else{
            idLastSpeech = tBodyTrElts[0].childNodes[7].lastElementChild.getAttribute('value');
        }

        function refresh() {
            setTimeout(function () {
                    /* Function executed in case of success of the request */
                    function show(response) {
                        if (response !== "NOR") {
                            buttonProcessElt.style.display = "none";
                            buttonSpeakElt.style.display = "block";
                            response = JSON.parse(response);
                            idLastSpeech = response[0].id;

                            /* Let's loop over the response results */
                            for (i=response.length-1; i>=0; i--) {

                                var tBodyTrElts = document.querySelectorAll('#tbody tr');

                                /* We catch the date & filters it to display the hour only */
                                var date = response[i].timestamp['date'];
                                date = date.substr(11, 8);

                                /* Let's create & fill the html elements to put into the table */
                                var trElt = document.createElement('tr');

                                var tdElt1 = document.createElement('td');
                                var tdElt2 = document.createElement('td');
                                var tdElt3 = document.createElement('td');
                                var tdElt4 = document.createElement('td');

                                var starElt = document.createElement('i');
                                starElt.setAttribute('class', 'material-icons');
                                starElt.textContent = "stars";

                                if (({{ app.user.id }}) !== response[i].id) {
                                    var buttonTdElt4 = document.createElement('button');
                                    buttonTdElt4.setAttribute('class', 'merits');
                                    buttonTdElt4.style.display = "none";
                                    buttonTdElt4.appendChild(starElt);
                                    tdElt4.appendChild(buttonTdElt4);
                                }

                                var inputIdSpeechElt = document.createElement('input');
                                inputIdSpeechElt.setAttribute('type', 'hidden');
                                inputIdSpeechElt.setAttribute('class', 'idSpeech');
                                inputIdSpeechElt.setAttribute('value', response[i].id);

                                var imgElt = document.createElement('img');
                                imgElt.setAttribute('src', '{{ asset('bundles/meritocrate/images/') }}' + response[i].picture + '');

                                tdElt1.textContent = date;
                                tdElt2.textContent = response[i].username;

                                tdElt3.appendChild(imgElt);
                                tdElt4.appendChild(inputIdSpeechElt);

                                trElt.appendChild(tdElt1);
                                trElt.appendChild(tdElt2);
                                trElt.appendChild(tdElt3);
                                trElt.appendChild(tdElt4);
                                trElt.style.opacity = '0';
                                tBodyElt.insertBefore(trElt, tBodyTrElts[0]);
                            }

                            /* Let's apply a fadeIn effect to the new rows */
                            tBodyTrElts = document.querySelectorAll('#tbody tr');
                            for(i=0; i<response.length; i++){
                                style(tBodyTrElts[i]);
                            }

                            function style(row) {
                                var opacity = 0;
                                var transparency = setInterval(opacityPlus, 50);

                                function opacityPlus() {
                                    opacity += 0.025;
                                    if (row.style.opacity <= 1) {
                                        row.style.opacity = '' + opacity + '';
                                    }
                                    else {
                                        clearInterval(transparency);
                                        /* Set back to 0 for next rows */
                                        opacity = 0;
                                    }
                                }
                            }

                            /* We enable marking */
                            addMerits();
                        }
                    }
                    ajaxUpdateUsers('{{ path('meritocrate_get_speakers') }}', show, idLastSpeech, idGroup);
                refresh();
            }, 7000);
        }
        refresh();
        /* Method that enables to give a mark */

        function ajaxAddMerit(url, callback, idSpeech, idRator){
            var req = new XMLHttpRequest();
            req.open('post', url, true);
            req.addEventListener("load", function(){
                if(req.status >=200 && req.status <400){
                    callback(req.responseText);
                }
            });
            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            req.send("idSpeech="+idSpeech+"&idRator="+idRator+"");
        }

        function addMerits() {
            var meritElts = document.getElementsByClassName('merits');

            for (i = 0; i < meritElts.length; i++) {
                meritElts[i].addEventListener("click", function () {
                    this.disabled = true;
                    this.lastElementChild.style.color = "gold";
                    var idSpeech = this.nextElementSibling.getAttribute('value');
                    var idRator = {{ user.id }};

                    function show(response) {
                        console.log(response);
                    }
                    ajaxAddMerit("{{ path('meritocrate_add_merit') }}", show, idSpeech, idRator);
                });
            }
        }
        addMerits();

        /* By Florent Alemany, Wild Code School Fontainebleau, May 2017 */
</script>
{% endblock %}