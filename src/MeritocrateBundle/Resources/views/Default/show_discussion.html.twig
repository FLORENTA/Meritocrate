{% extends 'base.html.twig' %}

{% block content %}
    <div class="container container-custom">
        <div class="row">
            <div class="col s12">
                <h4>{{ group.name }} Group </h4>
                <p id="group-date-creation"> Created on {{ group.datecreation|date('m/d/Y') }} at {{ group.datecreation|date('h:i:s a') }} </p>
            </div>
        </div>
        {% if group.ongoing == "true" %}
            <div class="row">
                <div class="col s12">
                    <a href="{{ path('meritocrate_join_discussion') }}">
                        <button class="btn waves-effet waves-light right green">
                            Exit Group
                            <i class="material-icons material-custom left">exit_to_app</i>
                        </button>
                    </a>
                </div>
            </div>
            <div class="row">
                <table class="highlight centered table-custom">
                    <thead>
                        <tr>
                            <td>Timestamp</td>
                            <td>Display Name</td>
                            <td>Picture</td>
                            <td>Merit</td>
                        </tr>
                    </thead>
                    <tbody id="tbody">
                        {% if speeches is not empty %}
                            {% for speech in speeches %}
                                <tr>
                                    <td>{{ speech.timestamp|date('h:i:s a') }}</td>
                                    <td>{{ speech.user.username }}</td>
                                    <td>
                                        {% if speech.user.picture == 'avatar.png' %}
                                            <img src="{{ asset('images/'~speech.user.picture) }}"/>
                                        {% else %}
                                            <img src="{{ asset('bundles/meritocrate/images/'~speech.user.picture) }}"/>
                                        {% endif %}
                                    <td>
                                        {% if app.user.id != speech.user.id %}
                                            {# Let's define an empty variable #}
                                            {% set rating = "" %}

                                            {# Let's check if the user
                                               has already marked the speech
                                             #}

                                            {% for merit in speech.merits %}
                                                {% if merit.rator.id == app.user.id %}
                                                    {% set rating = 'true' %}
                                                {% endif %}
                                            {% endfor %}

                                            {% if rating != true %}
                                                <button class="merits">
                                                    <i class="material-icons">stars</i>
                                                </button>
                                            {% else %}
                                                <button class="merits" style="color: gold;" disabled>
                                                    <i class="material-icons">stars</i>
                                                </button>
                                            {% endif %}
                                        {% endif %}
                                        <input type="hidden" class="idSpeech" value="{{ speech.id }}"/>
                                    </td>
                                </tr>
                            {% endfor %}
                        {% endif %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <p>
                This group has been closed by the owner.
                Get back to home :
            </p>
            <a href="{{ path('meritocrate_admin') }}"><button class="btn btn-large waves-effect waves-light left black">
                    Back to Home
                    <i class="material-icons material-custom left">replay</i>
                </button>
            </a>
        {% endif %}

    </div>
{% endblock %}
{% block javascripts %}

<script src="{{ asset('bundles/meritocrate/js/style.js') }}"></script>
<script type="text/javascript">

    /* If route matches /discussion/ */
    if(discussion.test(window.location.href)) {

        /* Which discussion group are we in ? */
        var idGroup = {{ group.id }};
        var idLastSpeech;
        var buttonSpeakElt = document.getElementById('speak');
        var buttonProcessElt = document.getElementById('processing');
        var tBodyElt = document.getElementById('tbody');

        /***** SENDS A REQUEST WHEN SOMEONE PRESSES TO SPEAK *****/
        buttonSpeakElt.addEventListener("click", function () {
            this.style.display = "none";
            buttonProcessElt.style.display = "block";

            var idUser = {{ user.id }};

            /* File style.js */
            namespaces.speak('{{ path('meritocrate_set_speaker') }}', idUser, idGroup);
        });

        /* How many rows in the table body ? */
        var tBodyTrElts = document.querySelectorAll('#tbody tr');
        var tBodyTrEltsLength = tBodyTrElts.length;

        if (tBodyTrEltsLength == 0) {
            idLastSpeech = 0;
        }
        else {
            idLastSpeech = tBodyTrElts[0].childNodes[7].lastElementChild.getAttribute('value');
        }

        /***** UPDATES THE SPEAKERS LIST EVERY 5 SECONDS *****/
        function refresh() {
            setTimeout(function () {
                /* Function executed in case of success of the request */
                function show(response) {
                    if (response !== "NOR") {
                        buttonProcessElt.style.display = "none";
                        buttonSpeakElt.style.display = "block";
                        response = JSON.parse(response);
                        idLastSpeech = response[0].id;

                        /* Let's loop over the response results */
                        for (i = response.length - 1; i >= 0; i--) {

                            var tBodyTrElts = document.querySelectorAll('#tbody tr');

                            /* We catch the date & filters it to display the hour only */
                            var date = response[i].timestamp['date'];
                            date = date.substr(11, 8);

                            /* Let's create & fill the html elements to put into the table */
                            var trElt = document.createElement('tr');

                            var tdElt1 = document.createElement('td');
                            var tdElt2 = document.createElement('td');
                            var tdElt3 = document.createElement('td');
                            var tdElt4 = document.createElement('td');

                            var starElt = document.createElement('i');
                            starElt.setAttribute('class', 'material-icons');
                            starElt.textContent = "stars";

                            console.log(response[i]);
                            if (({{ app.user.id }}) !== response[i].userId) {
                                var buttonTdElt4 = document.createElement('button');
                                buttonTdElt4.setAttribute('class', 'merits');
                                buttonTdElt4.appendChild(starElt);
                                tdElt4.appendChild(buttonTdElt4);
                            }

                            var inputIdSpeechElt = document.createElement('input');
                            inputIdSpeechElt.setAttribute('type', 'hidden');
                            inputIdSpeechElt.setAttribute('class', 'idSpeech');
                            inputIdSpeechElt.setAttribute('value', response[i].id);

                            var imgElt = document.createElement('img');
                            if(response[i].picture === "avatar.png") {
                                imgElt.setAttribute('src', '{{ asset('images/') }}' + response[i].picture + '');
                            }
                            else {
                                imgElt.setAttribute('src', '{{ asset('bundles/meritocrate/images/') }}' + response[i].picture + '');
                            }

                            tdElt1.textContent = date;
                            tdElt2.textContent = response[i].username;

                            tdElt3.appendChild(imgElt);
                            tdElt4.appendChild(inputIdSpeechElt);

                            trElt.appendChild(tdElt1);
                            trElt.appendChild(tdElt2);
                            trElt.appendChild(tdElt3);
                            trElt.appendChild(tdElt4);
                            trElt.style.opacity = '0';
                            tBodyElt.insertBefore(trElt, tBodyTrElts[0]);
                        }

                        /* Let's apply a fadeIn effect to the new rows */
                        tBodyTrElts = document.querySelectorAll('#tbody tr');
                        for (i = 0; i < response.length; i++) {
                            style(tBodyTrElts[i]);
                        }

                        function style(row) {
                            var opacity = 0;
                            var transparency = setInterval(opacityPlus, 50);

                            function opacityPlus() {
                                opacity += 0.025;
                                if (row.style.opacity <= 1) {
                                    row.style.opacity = '' + opacity + '';
                                }
                                else {
                                    clearInterval(transparency);
                                    /* Set back to 0 for next rows */
                                    opacity = 0;
                                }
                            }
                        }
                        /* We enable marking */
                        addMerits();
                    }
                }
                /* File style.js */
                namespaces.users('{{ path('meritocrate_get_speakers') }}', show, idLastSpeech, idGroup);
                refresh();
            }, 7000);
        }
        refresh();

        /***** SENDS A REQUEST WHEN SOMEONE PRESSES THE STAR *****/
        function addMerits() {
            var meritElts = document.getElementsByClassName('merits');

            for (i = 0; i < meritElts.length; i++) {
                meritElts[i].addEventListener("click", function () {
                    this.disabled = true;
                    this.lastElementChild.style.color = "gold";
                    var idSpeech = this.nextElementSibling.getAttribute('value');
                    var idRator = {{ user.id }};

                    namespaces.merits("{{ path('meritocrate_add_merit') }}", idSpeech, idRator);
                });
            }
        }
        addMerits();
    }

/* By Florent Alemany, Wild Code School Fontainebleau, May 2017 */

</script>

{% endblock %}